name: Deploy to AWS App Runner

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  APP_RUNNER_SERVICE_NAME: ${{ secrets.APP_RUNNER_SERVICE_NAME }}
  IMAGE_TAG: ${{ github.sha }}
  PORT: "5000"
  HEALTH_PATH: "/api/health"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        shell: bash
        run: |
          set -euo pipefail
          REPO="${ECR_REPOSITORY}"
          if ! aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1; then
            aws ecr create-repository --repository-name "$REPO" 1>/dev/null
            echo "Created ECR repository: $REPO"
          else
            echo "ECR repository exists: $REPO"
          fi

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          set -euo pipefail
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Building $IMAGE_URI"
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Ensure App Runner ECR access role exists
        id: ensure-role
        shell: bash
        run: |
          set -euo pipefail
          ROLE_NAME="AppRunnerECRAccessRole"
          POLICY_ARN="arn:aws:iam::aws:policy/AWSAppRunnerServicePolicyForECRAccess"
          if ! aws iam get-role --role-name "$ROLE_NAME" >/dev/null 2>&1; then
            aws iam create-role \
              --role-name "$ROLE_NAME" \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Principal": {"Service": "build.apprunner.amazonaws.com"},
                  "Action": "sts:AssumeRole"
                }]
              }' 1>/dev/null
            aws iam attach-role-policy --role-name "$ROLE_NAME" --policy-arn "$POLICY_ARN"
            echo "Created and attached policy to role: $ROLE_NAME"
            # Wait a moment for role propagation
            sleep 10
          else
            echo "Using existing role: $ROLE_NAME"
          fi
          ROLE_ARN=$(aws iam get-role --role-name "$ROLE_NAME" --query 'Role.Arn' --output text)
          echo "ROLE_ARN=$ROLE_ARN" >> $GITHUB_ENV

      - name: Create or update App Runner service
        shell: bash
        env:
          IMAGE_URI: ${{ env.IMAGE_URI }}
          ROLE_ARN: ${{ env.ROLE_ARN }}
        run: |
          set -euo pipefail
          SERVICE_NAME="$APP_RUNNER_SERVICE_NAME"

          # Lookup existing service ARN by name
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME'].ServiceArn | [0]" --output text)

          RUNTIME_ENV="Name=NODE_ENV,Value=${{ secrets.NODE_ENV || 'production' }} \
Name=PORT,Value=$PORT \
Name=AWS_REGION,Value=$AWS_REGION \
Name=DATABASE_URL,Value=${{ secrets.DATABASE_URL }} \
Name=WS_ALLOWED_ORIGINS,Value=${{ secrets.WS_ALLOWED_ORIGINS }}"

          if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" == "None" ]; then
            echo "Creating App Runner service: $SERVICE_NAME"
            aws apprunner create-service \
              --service-name "$SERVICE_NAME" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "'"$IMAGE_URI"'",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "'"$PORT"'",
                    "RuntimeEnvironmentVariables": [
                      {"Name":"NODE_ENV","Value":"'"${{ secrets.NODE_ENV || 'production' }}"'"},
                      {"Name":"PORT","Value":"'"$PORT"'"},
                      {"Name":"AWS_REGION","Value":"'"$AWS_REGION"'"},
                      {"Name":"DATABASE_URL","Value":"'"${{ secrets.DATABASE_URL }}"'"},
                      {"Name":"WS_ALLOWED_ORIGINS","Value":"'"${{ secrets.WS_ALLOWED_ORIGINS }}"'"}
                    ]
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "'"$ROLE_ARN"'"
                }
              }' \
              --health-check-configuration Path="$HEALTH_PATH" 1>/dev/null
          else
            echo "Updating App Runner service: $SERVICE_NAME"
            aws apprunner update-service \
              --service-arn "$SERVICE_ARN" \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "'"$IMAGE_URI"'",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "'"$PORT"'",
                    "RuntimeEnvironmentVariables": [
                      {"Name":"NODE_ENV","Value":"'"${{ secrets.NODE_ENV || 'production' }}"'"},
                      {"Name":"PORT","Value":"'"$PORT"'"},
                      {"Name":"AWS_REGION","Value":"'"$AWS_REGION"'"},
                      {"Name":"DATABASE_URL","Value":"'"${{ secrets.DATABASE_URL }}"'"},
                      {"Name":"WS_ALLOWED_ORIGINS","Value":"'"${{ secrets.WS_ALLOWED_ORIGINS }}"'"}
                    ]
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "'"$ROLE_ARN"'"
                }
              }' 1>/dev/null
          fi

          echo "Deployment triggered. Check App Runner console for status."


