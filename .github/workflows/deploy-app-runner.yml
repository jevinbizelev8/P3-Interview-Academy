name: Deploy to AWS App Runner

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: p3-interview-academy
  APP_RUNNER_SERVICE_NAME: p3-interview-academy-beta
  IMAGE_TAG: ${{ github.sha }}
  PORT: "5000"
  HEALTH_PATH: "/api/health"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Building $IMAGE_URI"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Create App Runner service
        run: |
          SERVICE_NAME="${{ env.APP_RUNNER_SERVICE_NAME }}"
          IMAGE_URI="${{ env.IMAGE_URI }}"
          
          # Create IAM role for App Runner if it doesn't exist
          ROLE_NAME="AppRunnerECRAccessRole"
          POLICY_ARN="arn:aws:iam::aws:policy/AWSAppRunnerServicePolicyForECRAccess"
          
          if ! aws iam get-role --role-name $ROLE_NAME >/dev/null 2>&1; then
            echo "Creating IAM role: $ROLE_NAME"
            aws iam create-role \
              --role-name $ROLE_NAME \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Principal": {"Service": "build.apprunner.amazonaws.com"},
                  "Action": "sts:AssumeRole"
                }]
              }' >/dev/null
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn $POLICY_ARN
            echo "Created IAM role: $ROLE_NAME"
            sleep 10
          else
            echo "IAM role exists: $ROLE_NAME"
          fi
          
          ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)
          echo "Using IAM role: $ROLE_ARN"
          
          # Check if service exists
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME'].ServiceArn | [0]" --output text)
          
          if [ "$SERVICE_ARN" = "None" ] || [ -z "$SERVICE_ARN" ]; then
            echo "Creating App Runner service: $SERVICE_NAME"
            aws apprunner create-service \
              --service-name $SERVICE_NAME \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "'$IMAGE_URI'",
                  "ImageRepositoryType": "ECR",
                  "ImageConfiguration": {
                    "Port": "'${{ env.PORT }}'",
                    "RuntimeEnvironmentVariables": [
                      {"Name":"NODE_ENV","Value":"production"},
                      {"Name":"PORT","Value":"'${{ env.PORT }}'"},
                      {"Name":"AWS_REGION","Value":"'${{ env.AWS_REGION }}'"},
                      {"Name":"DATABASE_URL","Value":"'${{ secrets.DATABASE_URL }}'"},
                      {"Name":"WS_ALLOWED_ORIGINS","Value":"'${{ secrets.WS_ALLOWED_ORIGINS }}'"}
                    ]
                  }
                },
                "AuthenticationConfiguration": {
                  "AccessRoleArn": "'$ROLE_ARN'"
                }
              }' \
              --health-check-configuration Path="${{ env.HEALTH_PATH }}" \
              --output table
          else
            echo "App Runner service exists: $SERVICE_NAME"
            echo "Service ARN: $SERVICE_ARN"
            echo "To update the service, you would need to run an update command"
          fi
          
          echo "Deployment completed successfully!"